<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * appProdUrlGenerator
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appProdUrlGenerator extends Symfony\Component\Routing\Generator\UrlGenerator
{
    static private $declaredRoutes = array(
        '_assetic_f3f271f' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'f3f271f',    'pos' => NULL,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/f3f271f.js',    ),  ),  4 =>   array (  ),),
        '_assetic_1b37284' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => '1b37284',    'pos' => NULL,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/1b37284.js',    ),  ),  4 =>   array (  ),),
        'atomic_api_topcraft_vote' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ApiBundle\\Controller\\TopcraftController::voteAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/topcraft/vote',    ),  ),  4 =>   array (  ),),
        'atomic_map_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\MapBundle\\Controller\\MapController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/map',    ),  ),  4 =>   array (  ),),
        'atomic_map_new' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\MapBundle\\Controller\\MapController::newAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/map/new',    ),  ),  4 =>   array (  ),),
        'atomic_map_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\MapBundle\\Controller\\MapController::createAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/map/create',    ),  ),  4 =>   array (  ),),
        'atomic_map_edit' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\MapBundle\\Controller\\MapController::editAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/map/edit',    ),  ),  4 =>   array (  ),),
        'atomic_map_update' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\MapBundle\\Controller\\MapController::updateAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/map/update',    ),  ),  4 =>   array (  ),),
        'atomic_map_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\MapBundle\\Controller\\MapController::deleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/map/delete',    ),  ),  4 =>   array (  ),),
        'atomic_map_show' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\MapBundle\\Controller\\MapController::showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/map/show',    ),  ),  4 =>   array (  ),),
        'atomic_shop_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ShopBundle\\Controller\\ShopController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/shop/',    ),  ),  4 =>   array (  ),),
        'atomic_shop_exchanger' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ShopBundle\\Controller\\ShopController::exchangerAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/shop/exchanger/',    ),  ),  4 =>   array (  ),),
        'atomic_interkassa_test' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ShopBundle\\Controller\\InterkassaController::payAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/shop/test/',    ),  ),  4 =>   array (  ),),
        'atomic_interkassa_donut' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ShopBundle\\Controller\\InterkassaController::donutAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/shop/donut/',    ),  ),  4 =>   array (  ),),
        'atomic_shop_buyshishs' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ShopBundle\\Controller\\ShopController::buyshishsAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/shop/buyshishs/',    ),  ),  4 =>   array (  ),),
        'atomic_shop_buyrubles' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ShopBundle\\Controller\\ShopController::buyrublesAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/shop/buyrubles/',    ),  ),  4 =>   array (  ),),
        'atomic_shop_success' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ShopBundle\\Controller\\InterkassaController::successAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/shop/success/',    ),  ),  4 =>   array (  ),),
        'atomic_shop_result' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ShopBundle\\Controller\\InterkassaController::resultAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/shop/result/',    ),  ),  4 =>   array (  ),),
        'atomic_shop_fail' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ShopBundle\\Controller\\InterkassaController::failAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/shop/fail/',    ),  ),  4 =>   array (  ),),
        'atomic_main_menu_homepage' => array (  0 =>   array (    0 => 'name',  ),  1 =>   array (    '_controller' => 'Atomic\\MainMenuBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'name',    ),    1 =>     array (      0 => 'text',      1 => '/hello',    ),  ),  4 =>   array (  ),),
        'atomic_server_homepage' => array (  0 =>   array (    0 => 'name',  ),  1 =>   array (    '_controller' => 'Atomic\\ServerBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'name',    ),    1 =>     array (      0 => 'text',      1 => '/hello',    ),  ),  4 =>   array (  ),),
        'atomic_server_list' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ServerBundle\\Controller\\ServerController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/server/list/',    ),  ),  4 =>   array (  ),),
        'atomic_server_new' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ServerBundle\\Controller\\ServerController::newAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/server/new/',    ),  ),  4 =>   array (  ),),
        'atomic_server_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\ServerBundle\\Controller\\ServerController::createAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/server/create/',    ),  ),  4 =>   array (  ),),
        'atomic_server_show' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\ServerBundle\\Controller\\ServerController::showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/server/show',    ),  ),  4 =>   array (  ),),
        'atomic_server_online_players' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\ServerBundle\\Controller\\CheckController::onlinePlayersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/server/online-players',    ),  ),  4 =>   array (  ),),
        'atomic_server_edit' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\ServerBundle\\Controller\\ServerController::editAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/server/edit',    ),  ),  4 =>   array (  ),),
        'atomic_server_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\ServerBundle\\Controller\\ServerController::deleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/server/delete',    ),  ),  4 =>   array (  ),),
        'atomic_server_update' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\ServerBundle\\Controller\\ServerController::updateAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/server/update',    ),  ),  4 =>   array (  ),),
        'atomic_user_list' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\UsersController::listAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/users/',    ),  ),  4 =>   array (  ),),
        'atomic_user_profile' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\UsersController::profileAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/profile',    ),  ),  4 =>   array (  ),),
        'atomic_user_show' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\UsersController::showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/user/show',    ),  ),  4 =>   array (  ),),
        'atomic_change_status' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\PermissionController::changeStatusAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/change-status/',    ),  ),  4 =>   array (  ),),
        'atomic_tuning' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\TuningController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tuning',    ),  ),  4 =>   array (  ),),
        'atomic_tuning_uploadskin' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\TuningController::uploadSkinAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tuning/uploadskin',    ),  ),  4 =>   array (  ),),
        'AtomicFirstStartBundle_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\FastStartBundle\\Controller\\FaststartController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/boostrap',    ),  ),  4 =>   array (  ),),
        'AtomicFirstStartBundle_addstep' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\FastStartBundle\\Controller\\FaststartController::newAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/boostrap/addstep',    ),  ),  4 =>   array (  ),),
        'AtomicFirstStartBundle_delete_step' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\FastStartBundle\\Controller\\FaststartController::deleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/boostrap/delete-step',    ),  ),  4 =>   array (  ),),
        'AtomicFirstStartBundle_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\FastStartBundle\\Controller\\FaststartController::createAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/boostrap/create',    ),  ),  4 =>   array (  ),),
        'AtomicBlogBundle_faststart_edit' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\FastStartBundle\\Controller\\FaststartController::editAction',  ),  2 =>   array (    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/boostrap/edit',    ),  ),  4 =>   array (  ),),
        'AtomicBlogBundle_faststart_editsave' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\FastStartBundle\\Controller\\FaststartController::editSaveAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/boostrap/edit/save',    ),  ),  4 =>   array (  ),),
        'AtomicBlogBundle_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\BlogBundle\\Controller\\PageController::indexAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/',    ),  ),  4 =>   array (  ),),
        'atomic_blog_page' => array (  0 =>   array (    0 => 'page',  ),  1 =>   array (    '_controller' => 'Atomic\\BlogBundle\\Controller\\PageController::pageAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'page',    ),    1 =>     array (      0 => 'text',      1 => '/page',    ),  ),  4 =>   array (  ),),
        'atomic_blog_comment_page' => array (  0 =>   array (    0 => 'id',    1 => 'page',  ),  1 =>   array (    '_controller' => 'Atomic\\BlogBundle\\Controller\\BlogController::pageAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'page',    ),    1 =>     array (      0 => 'text',      1 => '/page',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    3 =>     array (      0 => 'text',      1 => '/post',    ),  ),  4 =>   array (  ),),
        'AtomicBlogBundle_blog_show' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Atomic\\BlogBundle\\Controller\\BlogController::showAction',  ),  2 =>   array (    '_method' => 'GET',    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/post',    ),  ),  4 =>   array (  ),),
        'AtomicBlogBundle_blog_new' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\BlogBundle\\Controller\\BlogController::newAction',  ),  2 =>   array (    '_method' => 'GET',    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/newpost/',    ),  ),  4 =>   array (  ),),
        'AtomicBlogBundle_blog_edit' => array (  0 =>   array (    0 => 'blog_id',  ),  1 =>   array (    '_controller' => 'Atomic\\BlogBundle\\Controller\\BlogController::editAction',  ),  2 =>   array (    'id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'blog_id',    ),    1 =>     array (      0 => 'text',      1 => '/blog/edit',    ),  ),  4 =>   array (  ),),
        'AtomicBlogBundle_blog_edit_save' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\BlogBundle\\Controller\\BlogController::editSaveAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/blog/saveedit/',    ),  ),  4 =>   array (  ),),
        'AtomicBlogBundle_blog_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\BlogBundle\\Controller\\BlogController::createAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/newpost/',    ),  ),  4 =>   array (  ),),
        'AtomicBlogBundle_blog_delete' => array (  0 =>   array (    0 => 'blog_id',  ),  1 =>   array (    '_controller' => 'Atomic\\BlogBundle\\Controller\\BlogController::deleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'blog_id',    ),    1 =>     array (      0 => 'text',      1 => '/delete',    ),  ),  4 =>   array (  ),),
        'AtomicBlogBundle_comment_create' => array (  0 =>   array (    0 => 'blog_id',  ),  1 =>   array (    '_controller' => 'Atomic\\BlogBundle\\Controller\\CommentController::createAction',  ),  2 =>   array (    '_method' => 'POST',    'blog_id' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'blog_id',    ),    1 =>     array (      0 => 'text',      1 => '/view/comment',    ),  ),  4 =>   array (  ),),
        'fos_user_security_login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\SecurityController::loginAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login',    ),  ),  4 =>   array (  ),),
        'fos_user_security_check' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\SecurityController::checkAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login_check',    ),  ),  4 =>   array (  ),),
        'fos_user_security_logout' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\SecurityController::logoutAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/logout',    ),  ),  4 =>   array (  ),),
        'fos_user_profile_show' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\ProfileController::showAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/profile/',    ),  ),  4 =>   array (  ),),
        'fos_user_profile_edit' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\ProfileController::editAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/profile/edit',    ),  ),  4 =>   array (  ),),
        'fos_user_registration_register' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\RegistrationController::registerAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register/',    ),  ),  4 =>   array (  ),),
        'fos_user_registration_check_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\RegistrationController::checkEmailAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register/check-email',    ),  ),  4 =>   array (  ),),
        'fos_user_registration_confirm' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\RegistrationController::confirmAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/register/confirm',    ),  ),  4 =>   array (  ),),
        'fos_user_registration_confirmed' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\RegistrationController::confirmedAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register/confirmed',    ),  ),  4 =>   array (  ),),
        'fos_user_resetting_request' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::requestAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resetting/request',    ),  ),  4 =>   array (  ),),
        'fos_user_resetting_send_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::sendEmailAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resetting/send-email',    ),  ),  4 =>   array (  ),),
        'fos_user_resetting_check_email' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::checkEmailAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/resetting/check-email',    ),  ),  4 =>   array (  ),),
        'fos_user_resetting_reset' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::resetAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/resetting/reset',    ),  ),  4 =>   array (  ),),
        'fos_user_change_password' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Atomic\\UserBundle\\Controller\\ChangePasswordController::changePasswordAction',  ),  2 =>   array (    '_method' => 'GET|POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/profile/change-password',    ),  ),  4 =>   array (  ),),
        'fos_user_group_list' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\GroupController::listAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/group/list',    ),  ),  4 =>   array (  ),),
        'fos_user_group_new' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\GroupController::newAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/group/new',    ),  ),  4 =>   array (  ),),
        'fos_user_group_show' => array (  0 =>   array (    0 => 'groupName',  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\GroupController::showAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'groupName',    ),    1 =>     array (      0 => 'text',      1 => '/group',    ),  ),  4 =>   array (  ),),
        'fos_user_group_edit' => array (  0 =>   array (    0 => 'groupName',  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\GroupController::editAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/edit',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'groupName',    ),    2 =>     array (      0 => 'text',      1 => '/group',    ),  ),  4 =>   array (  ),),
        'fos_user_group_delete' => array (  0 =>   array (    0 => 'groupName',  ),  1 =>   array (    '_controller' => 'FOS\\UserBundle\\Controller\\GroupController::deleteAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/delete',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'groupName',    ),    2 =>     array (      0 => 'text',      1 => '/group',    ),  ),  4 =>   array (  ),),
        '_imagine_blog_thumb' => array (  0 =>   array (    0 => 'path',  ),  1 =>   array (    '_controller' => 'liip_imagine.controller:filterAction',    'filter' => 'blog_thumb',  ),  2 =>   array (    '_method' => 'GET',    'filter' => '[A-z0-9_\\-]*',    'path' => '.+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '.+',      3 => 'path',    ),    1 =>     array (      0 => 'text',      1 => '/media/cache/blog_thumb',    ),  ),  4 =>   array (  ),),
    );

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
    }

    public function generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens);
    }
}
